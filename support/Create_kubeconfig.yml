## Create kubeconfig
# 1. Get certificate 
yc managed-kubernetes cluster get --id $CLUSTER_ID --format json | \
  jq -r .master.master_auth.cluster_ca_certificate | \
  awk '{gsub(/\\n/,"\n")}1' > ca.pem

# 2. Создайте объект ServiceAccount 
#Create file with the content:
### start content ###
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system
---
apiVersion: v1
kind: Secret
metadata:
  name: admin-user-token
  annotations:
    kubernetes.io/service-account.name: admin-user
  namespace: kube-system
type: kubernetes.io/service-account-toke
### end content ###

# Run the command:
kubectl create -f sa.yaml

# 3. Create token variable
SA_TOKEN=$(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | \
  grep admin-user | \
  awk '{print $1}') -o json | \
  jq -r .data.token | \
  base64 --d)

# 4. Get External IP of k8s cluster
MASTER_ENDPOINT=$(yc managed-kubernetes cluster get --id $CLUSTER_ID \
  --format json | \
  jq -r .master.endpoints.internal_v4_endpoint

# 5. Create kubeconfig file
kubectl config set-cluster sa-otus\
  --certificate-authority=ca.pem \
  --server=$MASTER_ENDPOINT \
  --kubeconfig=kubeconfig

kubectl config set-credentials admin-user \
  --token=$SA_TOKEN \
  --kubeconfig=kubeconfig

kubectl config set-context default \
  --cluster=sa-otus \
  --user=admin-user \
  --kubeconfig=kubeconfig

kubectl config use-context default \
  --kubeconfig=kubeconfig

# 6. Check result
kubectl get namespace --kubeconfig=kubeconfig